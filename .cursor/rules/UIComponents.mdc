---
alwaysApply: true
---

# UI Components và Shadcn/ui

## 1. Shadcn/ui Components

### Cấu hình

- File cấu hình: [components.json](mdc:components.json)
- Thư mục components: [src/components/ui/](mdc:src/components/ui/)

### Components Cơ bản

- **Button**: [button.tsx](mdc:src/components/ui/button.tsx) - Sử dụng cho tất cả buttons
- **Card**: [card.tsx](mdc:src/components/ui/card.tsx) - Container cho content
- **Dialog**: [dialog.tsx](mdc:src/components/ui/dialog.tsx) - Modal dialogs
- **Input**: [input.tsx](mdc:src/components/ui/input.tsx) - Form inputs
- **Form**: [form.tsx](mdc:src/components/ui/form.tsx) - Form validation

### Sử dụng Button

```tsx
import { Button } from '@/components/ui/button';

// Primary button
<Button>Click me</Button>

// Secondary button
<Button variant="secondary">Secondary</Button>

// Destructive button
<Button variant="destructive">Delete</Button>

// Loading state
<Button disabled>
  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
  Loading...
</Button>
```

### Sử dụng Card

```tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
  </CardHeader>
  <CardContent>
    <p>Card content goes here</p>
  </CardContent>
</Card>;
```

## 2. Form Components

### Form với Validation

```tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

const formSchema = z.object({
  email: z.string().email(),
  password: z.string().min(6),
});

const MyForm = () => {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
  });

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input placeholder="email@example.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
};
```

## 3. Dialog và Modal

### Confirm Dialog

```tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

<Dialog open={open} onOpenChange={setOpen}>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Confirm Action</DialogTitle>
      <DialogDescription>
        Are you sure you want to perform this action?
      </DialogDescription>
    </DialogHeader>
    <DialogFooter>
      <Button variant="outline" onClick={() => setOpen(false)}>
        Cancel
      </Button>
      <Button onClick={handleConfirm}>Confirm</Button>
    </DialogFooter>
  </DialogContent>
</Dialog>;
```

## 4. Navigation Components

### Top Navigation

- Sử dụng [TopNav.tsx](mdc:src/components/TopNav.tsx) cho navigation chính
- Responsive design với mobile menu

### Bottom Navigation

- Sử dụng [BottomNav.tsx](mdc:src/components/BottomNav.tsx) cho mobile navigation
- Fixed position ở bottom

## 5. Loading và Error States

### Loading Skeleton

```tsx
import { LoadingSkeleton } from "@/components/shared/LoadingSkeleton";

// Sử dụng cho loading states
<LoadingSkeleton />;
```

### Error State

```tsx
import { ErrorState } from "@/components/shared/ErrorState";

// Sử dụng cho error states
<ErrorState message="Something went wrong" />;
```

## 6. Theme và Styling

### Dark/Light Mode

- Sử dụng [ToggleThemeButton.tsx](mdc:src/components/ToggleThemeButton.tsx)
- CSS variables cho theme colors
- Tailwind CSS classes: `bg-background`, `text-foreground`, `border-border`

### Responsive Design

```tsx
// Mobile first approach
<div className="p-4 md:p-6 lg:p-8">
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    {/* Content */}
  </div>
</div>
```

## 7. Icons

### Lucide React Icons

```tsx
import { Search, User, Settings, Home } from 'lucide-react';

// Sử dụng icons từ Lucide React
<Search className="h-4 w-4" />
<User className="h-5 w-5" />
```

## 8. Custom Components

### Tạo Custom Component

```tsx
// src/components/ui/custom-component.tsx
import { cn } from "@/lib/utils";
import { forwardRef } from "react";

interface CustomComponentProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: "default" | "secondary";
}

const CustomComponent = forwardRef<HTMLDivElement, CustomComponentProps>(
  ({ className, variant = "default", ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "base-styles",
          variant === "secondary" && "secondary-styles",
          className
        )}
        {...props}
      />
    );
  }
);

CustomComponent.displayName = "CustomComponent";

export { CustomComponent };
```
